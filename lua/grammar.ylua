%file "lua/parser"

%resolve field Name {: function(self, tokens)
  if tokens[2] == '=' then
    return self:go 'assign'
  else
    return self:go 'exp'
  end
end :}

// resolve conflict for parlist := (Name ',')+ Name; based on tokens[2] being , or not
%resolve parlist'star#1 Name {: function(self, tokens)
  if tokens[2] == ',' then
    return self:go 'namelist'
  else
    return self:go ''
  end
end :}

%resolve stat'group#2 Name {: function(self, tokens)
  if tokens[2] == '=' then
    return self:go 'forcounter'
  else
    return self:go 'foreach'
  end
end :}

%resolve assignment_or_call'star#1 '(' {: function(self, tokens)
  -- always reduce to call
  return self:go 'call'
end :}

root := $block;

block := $stat* retstat?;

stat := ';' | 
//  $varlist '=' $explist | 
//  $functioncall | // ( conflicts with var's (
  $assignment_or_call |
  $label | 
  break | 
  goto Name | 
  do $block end | 
  while $exp do $block end | 
  repeat $block until $exp | 
  if $exp then $block (elseif $exp then $block;)* (else $block;)? end | 
  for (<forcounter> Name '=' $exp ',' $exp (',' $exp;)? do $block end | <foreach> $namelist in $explist do $block end;) | 
  function $funcname $funcbody | 
  local (function Name $funcbody | $namelist ('=' $explist;)?;);

retstat := return $explist? ';'?;

label := '::' Name '::';

funcname := Name ('.' Name;)* (':' Name;)?;

namelist := Name (',' Name;)*;

explist := $exp (',' $exp;)*;

exp := (nil | false | true | Number | String | '...' | $functiondef | 
  $suffixedexp | $tableconstructor | $unop exp;) $binop $exp;

suffixedexp := $primaryexp ('.' Name | '[' $exp ']' | ':' Name $args | $args;)*;
primaryexp := Name | '(' $exp ')';

// %eps is func, the other 2 are assignments
// let's rule out the possibility of f() = x
assignment_or_call := $primaryexp ('.' Name | '[' $exp ']' | ':' Name $args | <call> $args;)* $assignment?;
assignment := ',' $suffixedexp $assignment | '=' $explist;

// prefixexp := $var | $functioncall | '(' $exp ')';

// functioncall := $prefixexp ($args | ':' Name $args;);

// varlist := $var (',' $var;)*;

// var := Name | $prefixexp ('[' $exp ']' | '.' Name;);

args := '(' $explist? ')' | $tableconstructor | String;

functiondef := function $funcbody;

funcbody := '(' $parlist? ')' $block end;

parlist := (<namelist> Name ',';)+ (Name | '...';) | '...';

// TODO: disambiguate by restricting { fieldsep }
tableconstructor := '{' $fieldlist? fieldsep? '}';

fieldlist := $field ($fieldsep $field;)*;

field := '[' $exp ']' '=' $exp | <assign> Name '=' $exp | <exp> $exp;

fieldsep := ',' | ';';

binop := '+' | '-' | '*' | '/' | '^' | '%' | '..' | 
  '<' | '<=' | '>' | '>=' | '==' | '~=' | 
  and | or;

unop := '-' | not | '#';